<?php

require_once dirname(__FILE__).'/../../src/Tinypass.php';
require_once dirname(__FILE__).'/../ClientTestUtil.php';

/**
 * Test class for AccessToken.
 * Generated by PHPUnit on 2011-03-01 at 22:00:18.
 */
class TPAccessTokenTest extends PHPUnit_Framework_TestCase {
	/**
	 * @var AccessToken
	 */
	protected $accessToken;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->accessToken = new TPAccessToken(123456, 3000);
		$this->accessToken->getTokenData()->addField(TPTokenData::CREATED_TIME, 10);
	}

	public function testGetValues() {
		$this->assertNotNull($this->accessToken->getTokenData()->getValues());
	}

	public function testGetRidHash() {
		$rid = 123456;
		$this->assertEquals($rid, $this->accessToken->getTokenData()->getRID());
	}

	public function testGetExpiration() {
		$this->assertEquals(3000, $this->accessToken->getExpirationInSecs());
	}

	public function testGetCreatedTime() {
		$this->assertEquals(10, $this->accessToken->getCreatedTimeInSecs());
	}

	public function testAddField() {
		$this->accessToken->getTokenData()->addField("one", "value");
		$map = $this->accessToken->getTokenData()->getValues();
		$this->assertEquals("value", $map['one']);
	}


	public function testAccessGranted() {
		$token = ClientTestUtil::createFakeToken("RID1", TPUtils::now() + 4);
		$this->assertTrue($token->isAccessGranted());
		$this->assertEquals(TPAccessState::ACCESS_GRANTED, $token->getAccessState());
	}

	public function testDeniedBecauseListIsEmpty() {
		$store = new TPAccessTokenStore();
		$token = $store->getAccessToken("RID1");
		$this->assertFalse($token->isAccessGranted());
		$this->assertNull($store->getTokens()->getAccessTokenByRID("RID1"));
		$this->assertEquals(TPAccessState::RID_NOT_FOUND, $token->getAccessState());
	}

	public function testDeniedBecauseExpired() {
		$token = ClientTestUtil::createFakeToken("RID1", TPUtils::now() - 1);
		$this->assertFalse($token->isAccessGranted());
		$this->assertTrue($token->isExpired());
		$this->assertEquals(TPAccessState::EXPIRED, $token->getAccessState());
	}

	public function testOnCreateAllAccessIsDenied() {
		$store = new TPAccessTokenStore();
		$token = $store->getAccessToken("Basic");
		$this->assertFalse($token->isAccessGranted());
	}

	public function testTokenExpireTimeStaysInSeconds() {
		$currentTimeSeconds = TPUtils::now();
		$token = new TPAccessToken("SOMEID", $currentTimeSeconds);
		$this->assertEquals($currentTimeSeconds, $token->getExpirationInSecs());
		$this->assertEquals($currentTimeSeconds * 1000, $token->getExpirationInMillis());
	}

	public function testNoExpirationTime() {
		$token = new TPAccessToken("SOMEID", 0);
		$this->assertFalse($token->isExpired());

		$token = new TPAccessToken("SOMEID", null);
		$this->assertFalse($token->isExpired());
	}

	public function testTokenIsExpired() {
		//set token to expire 2 seconds ago
		$token = new TPAccessToken("SOMEID", TPUtils::now() - 2);
		$this->assertTrue($token->isExpired());

		//set token to expire 10 seconds from$now
		$token = new TPAccessToken("SOMEID", TPUtils::now() + 10);
		$this->assertFalse($token->isExpired());

	}

	public function testPreExpirationWorks() {

		$now = TPUtils::now();
		$future = TPUtils::now() + 20;
		$past = TPUtils::now() - 2;

		$token = new TPAccessToken("SOMEID",$now, $past);
		$this->assertTrue($token->isExpired());

		$token = new TPAccessToken("SOMEID",$now, $now);
		$this->assertTrue($token->isExpired());

//real expire 20secs in tfhe futre and pre expire 21 seconds in the puture
		$token = new TPAccessToken("SOMEID", $future, $future + 10000);
		$this->assertFalse($token->isExpired());
	}



}
?>
